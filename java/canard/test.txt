# Define some types
def Ring : Type
def Scheme : Type
def Module (R : Ring) : Type

def RingMorphism (X Y : Ring) : Type
def SchemeMorphism (X Y : Scheme) : Type
def ModuleMorphism {R : Ring} (M N : Module R) : Type


# Constructions
def Spec (R : Ring) : Scheme
def RingAsModule (R : Ring) : Module R

def SchemeId (X : Scheme) : SchemeMorphism X X
def RingId (R : Ring) : RingMorphism R R
def ModuleId {R : Ring} (M : Module R) : ModuleMorphism M M


# Scheme properties
def affine quasi_compact regular noetherian locally_noetherian reduced irreducible cohen_macaulay excellent separated quasi_separated jacobson normal integral finite_dimensional connected (X : Scheme) : Prop
def isomorphism formally_etale formally_unramified formally_smooth proper finite quasi_finite flat m_affine m_quasi_compact separated quasi_separated m_regular finite_presentation locally_finite_type locally_finite_presentation etale smooth unramified finite_type open universally_closed immersion open_immersion closed_immersion finite_fibers surjective zariski_cover etale_cover smooth_cover syntomic_cover fppf_cover fpqc_cover faithfully_flat {X Y : Scheme} (f : SchemeMorphism X Y) : Prop


# Examples
def ZZ : Ring

# Theorems
def aff_imp_qcomp {X : Scheme} (h : affine X) : quasi_compact X
def reg_imp_lnoeth {X : Scheme} (h : regular X) : locally_noetherian X

def int_imp_red {U : Scheme} (h : integral U) : reduced U
def int_imp_irred {V : Scheme} (h : integral V) : irreducible V
def red_irred_imp_int {T : Scheme} (h1 : reduced T) (h2 : irreducible T) : integral T

# ... and many more!


# Theorems on morphisms

def lfp_imp_lft {X Y : Scheme} {f : SchemeMorphism X Y} (h : locally_finite_presentation f) : locally_finite_type f
def fp_imp_ft {X Y : Scheme} {f : SchemeMorphism X Y} (h : finite_presentation f) : finite_type f



def SpecIsAffine (R : Ring) : affine (Spec R)


def ZZIntegral : integral (Spec ZZ)


check red_irred_imp_int (int_imp_red ZZIntegral) (int_imp_irred ZZIntegral) ;


