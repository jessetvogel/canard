import "../commutative_algebra/commutative_algebra.cnd"
import "../topology/topology.cnd"

open commutative_algebra
open topology

namespace algebraic_geometry

let Scheme : Type

-- Underlying topological space
let top_of_scheme (X : Scheme) : TopSpace

namespace scheme
-- Scheme properties
let affine quasi_compact regular noetherian locally_noetherian reduced irreducible cohen_macaulay excellent separated quasi_separated jacobson normal integral finite_dimensional (X : Scheme) : Prop
def connected (X : Scheme) := topology.connected (top_of_scheme X)
end scheme

namespace morphism
-- Morphism properties
let formally_etale formally_unramified formally_smooth proper finite quasi_finite flat affine quasi_compact separated quasi_separated regular finitely_presented locally_finite_type locally_finitely_presented etale smooth unramified finite_type open_morphism universally_closed immersion open_immersion closed_immersion finite_fibers surjective zariski_cover etale_cover smooth_cover syntomic_cover fppf_cover fpqc_cover faithfully_flat {X Y : Scheme} (f : Morphism X Y) : Prop

-- Property properties
let stable_composition (P {X Y : Scheme} (f : Morphism X Y) : Prop) : Prop
end morphism

-- Sheaves
let Sheaf (X : Scheme) : Type
namespace sheaf
let quasi_coherent coherent free locally_free flasque {X : Scheme} (F : Sheaf X) : Prop
end sheaf


-- General constructions
let Spec (R : Ring) : Scheme
let sheaf_of_module {R : Ring} (M : Module R) : Sheaf (Spec R)

end algebraic_geometry

import "examples.cnd"
import "theorems.cnd"
