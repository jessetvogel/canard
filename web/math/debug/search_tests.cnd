-- import "/Users/jessevogel/Projects/canard/web/math/main.cnd"

-- Open everything!
open *

-- Bugs above, usual tests below
search (R : Ring);

search (X : Scheme) (h : scheme.affine X);
search (X : Scheme) (h : scheme.affine X) (q : scheme.quasi_compact X);

search (P (X : Scheme) (h : scheme.affine X) : scheme.quasi_compact X);
search (P (X : Scheme) (h : scheme.affine X) : scheme.quasi_separated X);
search (P (X : Scheme) (h : scheme.affine X) : scheme_map.affine (id X) );
search (P (X : Scheme) (h : scheme.affine X) : scheme_map.quasi_compact (id X) );
search (P {X Y : Scheme} {f : Morphism X Y} (h : closed_immersion f) : locally_finite_type f) ;
search (P {X Y Z: Scheme} {f : Morphism X Y} {g : Morphism Y Z} (fProper : scheme_map.proper f) (gProper : scheme_map.proper g) : scheme_map.proper (comp g f));
search (P {X Y Z: Scheme} {f : Morphism X Y} {g : Morphism Y Z} (fFinite : scheme_map.finite f) (gFinite : scheme_map.finite g) : scheme_map.proper (comp g f));

search (P {A B : Prop} (h (a : A) : B) (x : A) : B);
search (P {A B : Prop} (h (a : A) : B) (a1 : A) (a2 : A) : B);
search (P {A B : Prop} (h (a : A) : B) (nb : not B) : not A);
search (P (X: Scheme) (h : not (scheme.quasi_compact X)) : not (scheme.affine X));
search (P {X Y : Scheme} {f : Morphism X Y} (h : not (universally_closed f)) : not (scheme_map.proper f));

search (P {X Y: Scheme} {f : Morphism X Y} (h : not (scheme_map.unramified f)) : not (scheme_map.etale f));
search (P {X Y: Scheme} {f : Morphism X Y} (h : scheme_map.etale f) : scheme_map.unramified f);

search (P : locally_noetherian (affine_line (Spec QQ)));

search (X : Scheme) (h1 : scheme.affine X) (h2 : scheme.quasi_compact X);
search (X : Scheme) (h : scheme.integral X);
search (R : Ring) (h : scheme.integral (Spec R));
search (X Y : Scheme) (f : Morphism X Y);
search (R : Ring) (M N : Module R) (f : Morphism M N);
search (R : Ring) (M : Module R) (h1 : module.flat M) (h2 : not (module.free M));
search (P {U V W : Scheme} {g : Morphism U V} {h : Morphism V W} (gClosedImm : closed_immersion g) (hClosedImm : closed_immersion h) : scheme_map.proper (comp h g));

search (X Y : Scheme) (f : Morphism X Y) (h : not (zariski_cover f));
search (h1 : not (scheme_map.formally_etale (ec_to_P1 QQ_is_field))) (h2 : not (scheme_map.open_immersion (ec_to_P1 QQ_is_field)));
search (h : not (scheme_map.open_immersion (mSpec QQ_to_QQ_sqrt2)));

search (P (T_ S_ : Type) (F_ (t_ : T_) : S_) (h_ : functor F_) (X_ Y_ : T_) (f_ : Morphism X_ Y_) : Morphism (F_ X_) (F_ Y_));

search (h : not (zariski_local scheme.connected));
