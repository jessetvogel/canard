open algebraic_geometry
open commutative_algebra

open algebraic_geometry.scheme
open algebraic_geometry.morphism
open commutative_algebra.ring

namespace algebraic_geometry

-- The empty scheme $\varnothing = \Spec(\{ 0 \})$.
def empty_scheme := Spec zero_ring
-- The empty scheme is empty.
let empty_empty: empty empty_scheme
-- The empty scheme is not irreducible.
let empty_not_irr : not (irreducible empty_scheme)
-- The empty scheme is not integral.
let empty_not_int : not (integral empty_scheme)
-- The empty scheme is not connected.
let empty_cn : not (connected empty_scheme)


-- The scheme $\Spec(R)$ is non-empty whenever $R$ is not the zero ring.
let spec_not_empty {R : Ring} (h : not (trivial R)) : not (empty (Spec R))
-- The scheme $\Spec(R)$ is affine for any ring $R$.
let spec_af (R : Ring) : scheme.affine (Spec R)
-- The scheme $\Spec(R)$ is integral whenever $R$ is a domain.
let spec_int {R : Ring} (h : ring.domain R) : integral (Spec R)
-- The scheme $\Spec(R)$ is noetherian whenever $R$ is noetherian.
let spec_nt {R : Ring} (h : ring.noetherian R) : scheme.noetherian (Spec R)
-- The scheme $\Spec(k)$ is regular whenever $k$ is field.
let spec_rg {k : Ring} (h : ring.field k) : scheme.regular (Spec k)
let spec_irr {R : Ring} (h : prime_ideal (nilradical R)) : irreducible (Spec R)
let spec_nm {R : Ring} (h : integrally_closed R) : normal (Spec R)
let spec_not_nm {R : Ring} (h : not (integrally_closed R)) : not (normal (Spec R))
let spec_exc {R : Ring} (h : ring.excellent R) : scheme.excellent (Spec R)
let spec_jcb {R : Ring} (h : ring.jacobson R) : scheme.jacobson (Spec R)
-- The scheme $\Spec(R)$ is reduced whenever $R$ is reduced.
let spec_rd {R : Ring} (h : ring.reduced R) : scheme.reduced (Spec R)

-- The affine line $\AA^1_X = \AA^1 \times X$ over a given scheme $X$.
let affine_line (X : Scheme) : Scheme
let affine_line_af (R : Ring) : scheme.affine (affine_line (Spec R))
let hilbert_basis_thm {X : Scheme} (h : locally_noetherian X) : locally_noetherian (affine_line X)
let affine_line_rd {X : Scheme} (h : scheme.reduced X) : scheme.reduced (affine_line X)
let affine_line_sp {X : Scheme} (h : scheme.separated X) : scheme.separated (affine_line X)
let affine_line_qsp {X : Scheme} (h : scheme.quasi_separated X) : scheme.quasi_separated (affine_line X)
let affine_line_jcb {X : Scheme} (h : scheme.jacobson X) : scheme.jacobson (affine_line X)
let affine_line_int {X : Scheme} (h : scheme.integral X) : scheme.integral (affine_line X)
let affine_line_nm {X : Scheme} (h : normal X) : normal (affine_line X)
-- let affine_line_cn {X : Scheme} (h : scheme.connected X) : scheme.connected (affine_line X)

-- AA^1_X \to X
let affine_line_to_base (X : Scheme) : Morphism (affine_line X) X
let affine_line_to_base_ff (X : Scheme) : faithfully_flat (affine_line_to_base X)
let affine_line_to_base_sm (X : Scheme) : smooth (affine_line_to_base X)
let affine_line_to_base_fp (X : Scheme) : finitely_presented (affine_line_to_base X)
def affine_line_rg {X : Scheme} (h : scheme.regular X) := src_rg_of_sm_trg_rg h (affine_line_to_base_sm X)

-- Projective line
let proj_line (X : Scheme) : Scheme
let proj_line_not_affine (X : Scheme) : not (scheme.affine (proj_line X)) -- only if X is non-empty ..
let proj_line_integral {X : Scheme} (h : integral X) : integral (proj_line X)
let proj_line_separated {X : Scheme} (h : scheme.separated X) : scheme.separated (proj_line X)

-- X \times Spec(ZZ[x]/(x^2))
let thick (X : Scheme) : Scheme
let thick_af {X : Scheme} (h : scheme.affine X) : scheme.affine (thick X)
let thick_cn {X : Scheme} (h : scheme.connected X) : scheme.connected (thick X)
let thick_lnt {X : Scheme} (h : scheme.locally_noetherian X) : scheme.locally_noetherian (thick X)
let thick_not_rd (X : Scheme) : not (scheme.reduced (thick X)) -- only if X is non-empty ..
let thick_sp {X : Scheme} (h : scheme.separated X) : scheme.separated (thick X)
let thick_qsp {X : Scheme} (h : scheme.quasi_separated X) : scheme.quasi_separated (thick X)

-- (thick X) \to X
let thick_to_base (X : Scheme) : Morphism (thick X) X
let thick_to_base_fn (X : Scheme) : morphism.finite (thick_to_base X)
let thick_to_base_fp (X : Scheme) : morphism.finitely_presented (thick_to_base X)
let thick_to_base_not_ci (X : Scheme) : not (closed_immersion (thick_to_base X)) -- only if X is non-empty
let thick_to_base_fl (X : Scheme) : flat (thick_to_base X)
let thick_to_base_sj (X : Scheme) : surjective (thick_to_base X)

-- Elliptic curve over a field
let ec {k : Ring} (h : field k) : Scheme
let ec_not_af {k : Ring} (h : field k) : not (scheme.affine (ec h))
let ec_sp {k : Ring} (h : field k) : scheme.separated (ec h)
let ec_qc {k : Ring} (h : field k) : scheme.quasi_compact (ec h)
let ec_int {k : Ring} (h : field k) : scheme.integral (ec h)
let ec_rg {k : Ring} (h : field k) : scheme.regular (ec h)

-- Elliptic curve --> P1 by x coordinate
let ec_to_P1 {k : Ring} (h : field k) : Morphism (ec h) (proj_line (Spec k))
let ec_to_P1_not_et {k : Ring} (h : field k) : not (etale (ec_to_P1 h))
let ec_to_P1_fn {k : Ring} (h : field k) : morphism.finite (ec_to_P1 h)
let ec_to_P1_fl {k : Ring} (h : field k) : morphism.flat (ec_to_P1 h)
let ec_to_P1_sj {k : Ring} (h : field k) : morphism.surjective (ec_to_P1 h)
let ec_to_P1_fp {k : Ring} (h : field k) : morphism.finitely_presented (ec_to_P1 h)

-- Integral closure ZZ in \bar{QQ}
def Spec_ZZ_bar := Spec ZZ_bar
let ZZ_bar_not_cm : not (scheme.cohen_macaulay Spec_ZZ_bar)
let ZZ_bar_int : scheme.integral Spec_ZZ_bar
let ZZ_bar_not_lnt : not (scheme.locally_noetherian Spec_ZZ_bar)
let ZZ_bar_nm : scheme.normal Spec_ZZ_bar

-- Spec CC \to Spec RR
def Spec_CC_to_Spec_RR := mSpec RR_to_CC
let Spec_CC_to_Spec_RR_not_ci : not (closed_immersion Spec_CC_to_Spec_RR)
let Spec_CC_to_Spec_RR_et : etale Spec_CC_to_Spec_RR
let Spec_CC_to_Spec_RR_fn : morphism.finite Spec_CC_to_Spec_RR
let Spec_CC_to_Spec_RR_fl : morphism.flat Spec_CC_to_Spec_RR
let Spec_CC_to_Spec_RR_not_imm : not (morphism.immersion Spec_CC_to_Spec_RR)
let Spec_CC_to_Spec_RR_fp : morphism.finitely_presented Spec_CC_to_Spec_RR
let Spec_CC_to_Spec_RR_af : morphism.finitely_presented Spec_CC_to_Spec_RR
let Spec_CC_to_Spec_RR_sj : morphism.surjective Spec_CC_to_Spec_RR

-- Spec QQ \sqcup Spec QQ = Spec (QQ x QQ)
let two_pts {k : Ring} (h : field k) : Scheme
let two_pts_af {k : Ring} (h : field k) : scheme.affine (two_pts h)
let two_pts_not_cn {k : Ring} (h : field k) : not (scheme.connected (two_pts h))
let two_pts_rg {k : Ring} (h : field k) : scheme.regular (two_pts h)
let two_pts_nt {k : Ring} (h : field k) : scheme.noetherian (two_pts h)

-- infinite union of points over a field
let inf_points {k : Ring} (h : field k) : Scheme
let inf_points_not_qc {k : Ring} (h : field k) : not (scheme.quasi_compact (inf_points h))
let inf_points_not_nt {k : Ring} (h : field k) : not (scheme.noetherian (inf_points h))
let inf_points_lnt {k : Ring} (h : field k) : scheme.locally_noetherian (inf_points h)
let inf_points_rg {k : Ring} (h : field k) : scheme.regular (inf_points h)
let inf_points_sp {k : Ring} (h : field k) : scheme.separated (inf_points h)
let inf_points_not_cn {k : Ring} (h : field k) : not (scheme.connected (inf_points h))

-- infinite union of points to point
let int_pts_to_pt {k : Ring} (h : field k) : Morphism (inf_points h) (Spec k)



let open_complement {X Z : Scheme} {i : Morphism Z X} (h : closed_immersion i) : Scheme
let open_complement_inclusion {X Z : Scheme} {i : Morphism Z X} (h : closed_immersion i) : Morphism (open_complement h) X

-- Spec QQ[sqrt{2}]
def Spec_QQ_sqrt2 := Spec QQ_sqrt2

-- Spec QQ[sqrt{2}] \to Spec QQ
def Spec_QQ_sqrt2_to_Spec_QQ := mSpec QQ_to_QQ_sqrt2
let Spec_QQ_sqrt2_to_Spec_QQ_not_zrc : not (zariski_cover Spec_QQ_sqrt2_to_Spec_QQ)
let Spec_QQ_sqrt2_to_Spec_QQ_etc : etale_cover Spec_QQ_sqrt2_to_Spec_QQ
let Spec_QQ_sqrt2_to_Spec_QQ_fn : morphism.finite Spec_QQ_sqrt2_to_Spec_QQ
let Spec_QQ_sqrt2_to_Spec_QQ_not_ci : not (morphism.closed_immersion Spec_QQ_sqrt2_to_Spec_QQ)

-- Plane minus origin
let plane_no_origin {k : Ring} (h : field k) : Scheme
let plane_no_origin_not_af {k : Ring} (h : field k) : not (scheme.affine (plane_no_origin h))
let plane_no_origin_int {k : Ring} (h : field k) : scheme.integral (plane_no_origin h)
let plane_no_origin_qc {k : Ring} (h : field k) : scheme.quasi_compact (plane_no_origin h)
let plane_no_origin_rg {k : Ring} (h : field k) : scheme.regular (plane_no_origin h)
let plane_no_origin_sp {k : Ring} (h : field k) : scheme.separated (plane_no_origin h)

-- Plane minus origin to Spec k
let plane_no_origin_to_Spec_k {k : Ring} (h : field k) : Morphism (plane_no_origin h) (Spec k)
let plane_no_origin_to_Spec_k_not_et {k : Ring} (h : field k) : not (etale (plane_no_origin_to_Spec_k h))
let plane_no_origin_to_Spec_k_ffl {k : Ring} (h : field k) : faithfully_flat (plane_no_origin_to_Spec_k h)
let plane_no_origin_to_Spec_k_not_ff {k : Ring} (h : field k) : not (finite_fibers (plane_no_origin_to_Spec_k h))
let plane_no_origin_to_Spec_k_fp {k : Ring} (h : field k) : finitely_presented (plane_no_origin_to_Spec_k h)
let plane_no_origin_to_Spec_k_not_pr {k : Ring} (h : field k) : not (proper (plane_no_origin_to_Spec_k h))
let plane_no_origin_to_Spec_k_sm {k : Ring} (h : field k) : smooth (plane_no_origin_to_Spec_k h)
let plane_no_origin_to_Spec_k_sp {k : Ring} (h : field k) : morphism.separated (plane_no_origin_to_Spec_k h)
let plane_no_origin_to_Spec_k_not_ur {k : Ring} (h : field k) : not (morphism.unramified (plane_no_origin_to_Spec_k h))
-- let plane_no_origin_to_Spec_k_not_ci {k : Ring} (h : field k) : not (closed_immersion (plane_no_origin_to_Spec_k h))

-- The disjoint union $X \sqcup Y$ of two schemes $X$ and $Y$.
let disjoint_union (X Y : Scheme) : Scheme
-- The disjoint union $X \sqcup Y$ is not connected whenever $X$ and $Y$ are non-empty.
let du_not_cn {X Y : Scheme} (h1 : not (empty X)) (h : not (empty Y)) : not (connected (disjoint_union X Y))
-- Whenever a local property of schemes $P$ holds for $X$ and $Y$, it also holds for the disjoint union $X \sqcup Y$.
let du_zar_lc {X Y : Scheme} {P (S : Scheme) : Prop} (h1 : P X) (h2 : P Y) (l : zariski_local P) : P (disjoint_union X Y)
-- Whenever $X$ is non-empty, the disjoint union $X \sqcup Y$ is also non-empty
let du_empty_X {X : Scheme} (Y : Scheme) (h : not (empty X)) : not (empty (disjoint_union X Y))
-- Whenever $Y$ is non-empty, the disjoint union $X \sqcup Y$ is also non-empty
let du_empty_Y (X : Scheme) {Y : Scheme} (h : not (empty Y)) : not (empty (disjoint_union X Y))

end algebraic_geometry
