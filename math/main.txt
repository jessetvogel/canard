# Stuff on morphisms
let Morphism {T : Type} (X Y : T) : Type # maybe a bit too general ?
let id {T : Type} (X : T) : Morphism X X
let comp {T : Type} {X Y Z : T} (g : Morphism Y Z) (f : Morphism X Y) : Morphism X Z
def dom {T : Type} {X Y : T} (f : Morphism X Y) := X
def cod {T : Type} {X Y : T} (f : Morphism X Y) := Y

import "algebraic_geometry.txt"
import "commutative_algebra.txt"

open commutative_algebra
open algebraic_geometry

# Checks
# check red_irred_imp_int (int_imp_red SpecZZIntegral) (int_imp_irred SpecZZIntegral) ;

# close commutative_algebra
# close algebraic_geometry
