let Morphism {T : Type} (X Y : T) : Type
let id {T : Type} (X : T) : Morphism X X
let comp {T : Type} {X Y Z : T} (g : Morphism Y Z) (f : Morphism X Y) : Morphism X Z
let isomorphism {T : Type} {X Y : T} (f : Morphism X Y) : Prop

let functor {T S : Type} (F (t : T) : S) : Prop
let contravariant {T S : Type} (F (t : T) : S) : Prop
let fmap {T S : Type} {F (t : T) : S} (h : functor F) {X Y : T} (f : Morphism X Y) : Morphism (F X) (F Y)
let contramap {T S : Type} {F (t : T) : S} (h : contravariant F) {X Y : T} (f : Morphism X Y) : Morphism (F Y) (F X)

import "logic.cnd"
import "algebraic_geometry/core.cnd"
import "commutative_algebra/core.cnd"
import "topology/core.cnd"
